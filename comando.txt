pwd:  forma de encontrar la carpeta en donde estas en ese momento.
cd:  cambio de directorio, puede variar, por ejemplo con un / vas directo a la entrada en el disco duro/home.
ls:  es para listar los archivos, con -al sirve para que el programa muestre los archivos que se estan usando en ese momento incluyendo 
los ocultos. Si pones solo la l no te mostrara los archivos ocultos y/o . / .., otra cosa si pones solo la a, te mostrara los archivos 
ocultos pero no en una lista por eso es escencial que se use la al para que se vean los archivos de una manera mas ordenada.
clear/Ctrl l: sirve para limpiar el git bash.
cat:  es para ver el contenido del archivo que se esta usando en ese momento.
mkdir:  es para crear un directorio o carpeta va asi "mkdir (nombre de la carpeta)".
rm:  irve para borrar archivos, pero si usan mal la sintaxis se pueden borrar por completo el disco duro.
touch:  irve para crear archivos "touch (nombre del archivo)".
!33:  sirve para repetir comandos.
history:  sirve para ver el historial de los comandos hechos por el usuario.
--help:  sirve para pedir ayuda de cuantas funciones tiene un comando que se quiere usar.
git init:  es la forma de seleccionar una carpeta como el centro de de los archivos o volverla "master".
code:  sirve para abrir visual studio code desde git bash.
git log:  permite ver el historial de los cambios del archivo.
git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt.
git push: Envias los archivos al repositorio remoto.
git fetch: trae el archivos del repositorio remoto, al local, pero no lo copia a los archivos.
git merge: Ayuda al git fetch a fusionar el ultimo archivo de el repositorio remoto con tu archivo actual.
git pull: hace lo mismo que git fetch con git merge.